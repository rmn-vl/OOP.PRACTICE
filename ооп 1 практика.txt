                                .......СТУДЕНТ.....

#include <iostream>
#include <vector> // динам массив

class Student {
private:
    std::string name;
    int age;
    int studentId;
    std::vector<double> grades;

public:
    // конструктор
    Student(const std::string& name, int age, int studentId) :
        name(name), age(age), studentId(studentId) {}

    // метод добав. оценки
    void addGrade(double grade) {
        grades.push_back(grade);
    }

    // средний балл
    double calculateAverageGrade() const {
        if (grades.empty()) {
            std::cout << "У студента нет оценок.\n";
            return 0.0;
        }

        double sum = 0;
        for (double grade : grades) {
            sum += grade;
        }

        double average = sum / grades.size();
        std::cout << "Средний балл студента " << name << ": " << average << std::endl;
        return average;
    }

    // деструктор
    ~Student() {
        std::cout << "Обучение студента " << name << " завершено.\n";
    }
};

int main() {
    Student student("Роман Волощенко", 23, 11111);// задаем класс (фио,возраст,номер билета)
    // рандомные оценки
    student.addGrade(4.5);
    student.addGrade(3.7);
    student.addGrade(5.0);

    student.calculateAverageGrade();

    return 0;
}
 

                                .....КНИГА....
#include <iostream>
#include <string>

class Книга {
public:
  // конструктор
  Книга(const std::string& название, const std::string& автор, int год_издания, int количество_страниц) 
    : название(название), автор(автор), год_издания(год_издания), количество_страниц(количество_страниц) {}

  // деструктор
  ~Книга() {
    std::cout << "Объект 'Книга' уничтожен." << std::endl;
  }

  // метод вывода инфы о книге
  void вывести_информацию() const {
    std::cout << "Название: " << название << std::endl;
    std::cout << "Автор: " << автор << std::endl;
    std::cout << "Год издания: " << год_издания << std::endl;
    std::cout << "Количество страниц: " << количество_страниц << std::endl;
  }

private:
  std::string название;
  std::string автор;
  int год_издания;
  int количество_страниц;
};

int main() {
  // Создание объекта книги
  Книга книга("автостопом по галактикам", "дуглас адамс", 1979, 317); // название,автор,год,страницы

  // вывод информации 
  книга.вывести_информацию();

  return 0;
}
 

                                   ....КОМПЬЮТЕР.....
 #include <iostream>

class Компьютер {
private:
    std::string производитель;
    std::string модель_процессора;
    int объем_оперативной_памяти;
    int объем_жесткого_диска;
    int свободное_место_на_диске;

public:
    // конструктор
    Компьютер(const std::string& производитель, const std::string& модель_процессора,
              int объем_оперативной_памяти, int объем_жесткого_диска)
        : производитель(производитель),
          модель_процессора(модель_процессора),
          объем_оперативной_памяти(объем_оперативной_памяти),
          объем_жесткого_диска(объем_жесткого_диска),
          свободное_место_на_диске(объем_жесткого_диска) {}

    // метод проверки наличия свободного места 
    bool есть_свободное_место(int необходимый_объем) {
        return свободное_место_на_диске >= необходимый_объем;
    }

    // деструктор
    ~Компьютер() {
        std::cout << "Работа компьютера " << производитель << " "
                  << модель_процессора << " завершена.\n";
    }
};

int main() {
    // создаем объект класса Компьютер
    Компьютер мой_компьютер("Amd", "rayzen", 16, 500); (фирма,модель,оп,ожд)

    // проверяем наличие свободного места 
    if (мой_компьютер.есть_свободное_место(100)) {
        std::cout << "Достаточно свободного места.\n";
    } else {
        std::cout << "Недостаточно свободного места.\n";
    }

    return 0;
}

                             ......СЧЕТ В БАНКЕ.....

#include <iostream>
#include <string>

class BankAccount {// создаем класс
private:
    int accountNumber;
    std::string ownerName;
    double balance;

public:
    // конструктор
    BankAccount(int accountNumber, const std::string& ownerName) :
        accountNumber(accountNumber),
        ownerName(ownerName),
        balance(0.0) {}

    // деструктор
    ~BankAccount() {
        std::cout << "Счет " << accountNumber << " закрыт.\n";
    }

    // внесение денег на счет
    void deposit(double amount) {
        balance += amount;
        std::cout << "Внесено " << amount << " на счет " << accountNumber << ".\n";
    }

    // снятие денег
    void withdraw(double amount) {
        if (amount > balance) {
            std::cout << "Недостаточно средств на счете.\n";
        } else {
            balance -= amount;
            std::cout << "Снято " << amount << " со счета " << accountNumber << ".\n";
        }
    }

    // получение баланса
    double getBalance() const {
        return balance;
    }
};

int main() {
    BankAccount account1(11111, "Роман Волощенко");//(номер счета ,фио)

    // внесение денег на счет
    account1.deposit(1000.0);

    // снятие денег
    account1.withdraw(500.0);

    // вывод баланса
    std::cout << "Текущий баланс: " << account1.getBalance() << std::endl;

    return 0;
}
 

                                  ....ТЕЛЕФОН.....

#include <iostream>
#include <string>

class Телефон {//класс
private:
  std::string марка;
  std::string модель;
  std::string операционная_система;
  int емкость_батареи;

public:
  // конструктор
  Телефон(const std::string& марка, const std::string& модель,
          const std::string& операционная_система)
      : марка(марка),
        модель(модель),
        операционная_система(операционная_система),
        емкость_батареи(100) {} // Батарея по умолчанию 100%

  // деструктор
  ~Телефон() {
    std::cout << "Телефон " << марка << " " << модель << " отключен." << std::endl;
  }

  // метод  вывода информации о заряде батареи
  void вывод_информации_о_заряде() {
    std::cout << "Заряд батареи: " << емкость_батареи << "%" << std::endl;
  }
};

int main() {
  //  объект
  Телефон телефон("iphone", "12", "ios"); //(марка,модель,ос)

  // заряд батареи
  телефон.вывод_информации_о_заряде();

  return 0;
}
 
.............................ИГРОК............

#include <iostream>
#include <string>

class Игрок {//класс
private:
    std::string имя;
    int уровень;
    int очки_опыта;

public:
    // конструктор
    Игрок(const std::string& имя, int начальный_уровень) :
        имя(имя), уровень(начальный_уровень), очки_опыта(0) 
    {
        std::cout << "Создан игрок: " << имя << std::endl;
    }

    // деструктор
    ~Игрок() {
        std::cout << "Удален игрок: " << имя << std::endl;
    }

    // метод для повышения уровня
    void повысить_уровень() {
        if (очки_опыта >= 100) { // Пример условия для повышения уровня
            уровень++;
            очки_опыта -= 100; // Сброс очков после повышения уровня
            std::cout << имя << " повысил уровень до " << уровень << std::endl;
        }
    }

    // метод для получения имени
    std::string получить_имя() const {
        return имя;
    }

    // метод для получения уровня
    int получить_уровень() const {
        return уровень;
    }

    // метод для получения количества очков опыта
    int получить_очки_опыта() const {
        return очки_опыта;
    }

    // метод для добавления очков опыта
    void добавить_очки_опыта(int количество) {
        очки_опыта += количество;
        повысить_уровень(); // проверка 
    }
};

int main() {
    // создание игрока
    Игрок игрок1("роман", 1);

    // Добавление очков опыта
    игрок1.добавить_очки_опыта(50);
    игрок1.добавить_очки_опыта(40);

    // Вывод информации об игроке
    std::cout << "Имя игрока: " << игрок1.получить_имя() << std::endl;
    std::cout << "Уровень игрока: " << игрок1.получить_уровень() << std::endl;
    std::cout << "Очки опыта игрока: " << игрок1.получить_очки_опыта() << std::endl;

    return 0;
}
 
.....................ФИЛЬМ............

#include <iostream>
#include <string>

class Фильм {//класс
private:
    std::string название;
    std::string режиссер;
    int год_выхода;
    double рейтинг;

public:
    // конструктор
    Фильм(const std::string& название, const std::string& режиссер, int год_выхода, double рейтинг) :
        название(название), режиссер(режиссер), год_выхода(год_выхода), рейтинг(рейтинг)
    {
        std::cout << "Начинается показ фильма: " << название << std::endl;
    }

    // деструктор
    ~Фильм() {
        std::cout << "Показ фильма " << название << " завершен." << std::endl;
    }

    //  вывод инфы о фильме
    void вывести_информацию() const {
        std::cout << "Название: " << название << std::endl;
        std::cout << "Режиссер: " << режиссер << std::endl;
        std::cout << "Год выхода: " << год_выхода << std::endl;
        std::cout << "Рейтинг: " << рейтинг << std::endl;
    }
};

int main() {
    // Создание объекта Фильм
    Фильм фильм1("формаж 3", "джастин лин", 2006, 8.7);

    // Вывод информации о фильме
    фильм1.вывести_информацию();

    return 0;
}
 
 .....................РАБОТНИК................

 #include <iostream>
#include <string>

class Работник {//класс
private:
    std::string имя;
    std::string должность;
    double зарплата;
    int стаж_работы;

public:
    // конструктор
    Работник(const std::string& имя, const std::string& должность, double зарплата) :
        имя(имя), должность(должность), зарплата(зарплата), стаж_работы(0)
    {
        std::cout << "Нанят работник: " << имя << std::endl;
    }

    // деструктор
    ~Работник() {
        std::cout << "Уволен работник: " << имя << std::endl;
    }

    // Метод для повышения зарплаты
    void повысить_зарплату() {
        if (стаж_работы >= 5) { // пример условия для повышения зарплаты
            зарплата *= 1.1; // повышение на 10%
            std::cout << имя << " получил повышение зарплаты до " << зарплата << std::endl;
        }
    }

    // метод для получения имени
    std::string получить_имя() const {
        return имя;
    }

    // метод для получения должности
    std::string получить_должность() const {
        return должность;
    }

    // Метод для получения зарплаты
    double получить_зарплату() const {
        return зарплата;
    }

    // метод для получения стажа работы
    int получить_стаж_работы() const {
        return стаж_работы;
    }

    // метод для увеличения стажа работы
    void увеличить_стаж_работы(int количество_лет) {
        стаж_работы += количество_лет;
        повысить_зарплату(); // Проверка на повышение зарплаты после увеличения стажа
    }
};

int main() {
    // создание объекта Работник
    Работник работник1("роман", "Программист", 50000);

    // увеличение стажа работы
    работник1.увеличить_стаж_работы(3);
    работник1.увеличить_стаж_работы(3); // достигнут стаж для повышения

    // вывод информации о работнике
    std::cout << "Имя работника: " << работник1.получить_имя() << std::endl;
    std::cout << "Должность работника: " << работник1.получить_должность() << std::endl;
    std::cout << "Зарплата работника: " << работник1.получить_зарплату() << std::endl;
    std::cout << "Стаж работы работника: " << работник1.получить_стаж_работы() << std::endl;

    return 0;
}

.................................ТОВАР...............

 #include <iostream>
#include <string>

class Товар {//класс
private:
    std::string название;
    double цена;
    int количество_на_складе;

public:
    // конструктор
    Товар(const std::string& название, double цена) :
        название(название), цена(цена), количество_на_складе(0)
    {
        std::cout << "Товар " << название << " добавлен на склад." << std::endl;
    }

    // деструктор
    ~Товар() {
        std::cout << "Товар " << название << " больше не хранится на складе." << std::endl;
    }

    // метод для расчета стоимости товара на складе
    double рассчитать_стоимость() const {
        return цена * количество_на_складе;
    }

    // метод для получения названия
    std::string получить_название() const {
        return название;
    }

    // метод для получения цены
    double получить_цену() const {
        return цена;
    }

    // метод для получения количества на складе
    int получить_количество_на_складе() const {
        return количество_на_складе;
    }

    // метод для изменения количества на складе
    void изменить_количество_на_складе(int новое_количество) {
        количество_на_складе = новое_количество;
    }
};

int main() {
    // создание объекта Товар
    Товар товар1("ноутбук", 10000); // наименование ,цена

    // изменение количества на складе
    товар1.изменить_количество_на_складе(5);

    // расчет стоимости товара на складе
    double стоимость = товар1.рассчитать_стоимость();
    std::cout << "Стоимость товара " << товар1.получить_название() << " на складе: " << стоимость << std::endl;

    return 0;
}