                                .......СТУДЕНТ.....

#include <iostream>
#include <vector> // динам массив

class Student {
private:
    std::string name;
    int age;
    int studentId;
    std::vector<double> grades;

public:
    // конструктор
    Student(const std::string& name, int age, int studentId) :
        name(name), age(age), studentId(studentId) {}

    // метод добав. оценки
    void addGrade(double grade) {
        grades.push_back(grade);
    }

    // средний балл
    double calculateAverageGrade() const {
        if (grades.empty()) {
            std::cout << "У студента нет оценок.\n";
            return 0.0;
        }

        double sum = 0;
        for (double grade : grades) {
            sum += grade;
        }

        double average = sum / grades.size();
        std::cout << "Средний балл студента " << name << ": " << average << std::endl;
        return average;
    }

    // деструктор
    ~Student() {
        std::cout << "Обучение студента " << name << " завершено.\n";
    }
};

int main() {
    Student student("Роман Волощенко", 23, 11111);// задаем класс (фио,возраст,номер билета)
    // рандомные оценки
    student.addGrade(4.5);
    student.addGrade(3.7);
    student.addGrade(5.0);

    student.calculateAverageGrade();

    return 0;
}
 

                                .....КНИГА....
#include <string>
#include <iostream>

class Book {
private:
    std::string title;
    std::string author;
    int publicationYear;
    int numOfPages;

public:
  // конструктор
  Book(std::string title, std::string author, int publicationYear, int numOfPages) :
        title(title), author(author), publicationYear(publicationYear), numOfPages(numOfPages) {}

  
 // метод вывода инфы о книге
  void printInfo() {
        std::cout << "Название: " << title << ", Автор: " << author << ", Год издания: "
            << publicationYear << ", Количество страниц: " << numOfPages << std::endl;
}
// деструктор
  ~Book() {
    std::cout << "Объект 'Книга' уничтожен." << std::endl;
  }

};

int main() {
  // Создание объекта книги
  Book book("автостопом по галактикам", "дуглас адамс", 1979, 317); // название,автор,год,страницы

  // вывод информации 
  book.printInfo();

  return 0;
}
 

                                   ....КОМПЬЮТЕР.....
  #include <iostream>
#include <string>

class Computer {
private:
   std::string manufacturer;
    std::string cpuModel;
    int ramSize;
    int hddSize;
    

public:
    // Конструктор: принимает все поля.
     Computer(std::string manufacturer, std::string cpuModel, int ramSize, int hddSize) :
        manufacturer(manufacturer), cpuModel(cpuModel), ramSize(ramSize), hddSize(hddSize) {}
   
// метод проверки наличия свободного места 
    bool hasFreeDiskSpace() {
        return hddSize > 0;
    }

    // метод вывода инф 
    void printInfo() {
        std::cout << "Производитель: " << manufacturer << ", Модель процессора: " << cpuModel << ", Оперативная память: "
            << ramSize << " ГБ, Жесткий диск: " << hddSize << " ГБ" << std::endl;
    }

    // Деструктор: выводит сообщение о завершении работы компьютера.
    ~Computer() {
        std::cout << "Завершение работы компьютера." << std::endl;
    }
};

int main() {
    // создаем объект класса Компьютер
    Computer computer("Amd", "rayzen", 16, 500); //(фирма,модель,оп,ожд)

computer.printInfo();

    // проверяем наличие свободного места 
    if (computer.hasFreeDiskSpace()) {
        std::cout << "Достаточно свободного места.";
    } else {
        std::cout << "Недостаточно свободного места.";
    }

    return 0;
}

                             ......СЧЕТ В БАНКЕ.....

#include <iostream>
#include <string>

class BankAccount {// создаем класс
private:
    int accountNumber;
    std::string ownerName;
    double balance;

public:
    // конструктор
    BankAccount(int accountNumber, const std::string& ownerName) :
        accountNumber(accountNumber),
        ownerName(ownerName),
        balance(0.0) {}

    // деструктор
    ~BankAccount() {
        std::cout << "Счет закрыт." << std::endl;
    }

    // внесение денег на счет
    void deposit(double amount) {
        balance += amount;
        std::cout << "Внесено " << amount << " на счет " << accountNumber << ".\n";
    }

    // снятие денег
    void withdraw(double amount) {
        if (amount > balance) {
            std::cout << "Недостаточно средств на счете.\n";
        } else {
            balance -= amount;
            std::cout << "Снято " << amount << " со счета " << accountNumber << ".\n";
        }
    }

    // получение баланса
    double getBalance() const {
        return balance;
    }
};

int main() {
    BankAccount account1(11111, "Роман Волощенко");//(номер счета ,фио)

    // внесение денег на счет
    account1.deposit(1000.0);

    // снятие денег
    account1.withdraw(500.0);

    // вывод баланса
    std::cout << "Текущий баланс: " << account1.getBalance() << std::endl;

    return 0;
}
 

                                  ....ТЕЛЕФОН.....

#include <iostream>
#include <string>

class Phone {//класс
private:
  std::string brand;
  std::string model;
  std::string os;
  int batteryCapacity;

public:
  
// Конструктор: принимает марку, модель и ОС.
 Phone(std::string brand, std::string model, std::string os, int batteryCapacity)
        : brand(brand), model(model), os(os), batteryCapacity(batteryCapacity) {}
  
// Деструктор: выводит сообщение о том, что телефон отключен.
  ~Phone() {
    std::cout << "Телефон отключен.\n";
  }

  // Метод: вывод информации о заряде батареи.
  void displayBatteryInfo() { std::cout << "Заряд батареи: " << batteryCapacity << "%\n"; }
};

int main() {
  //  объект
  Phone phone ("iphone", "12", "ios", 100); //(марка,модель,ос)

  // заряд батареи
  phone.displayBatteryInfo();

  return 0;
}
 
.............................ИГРОК............

#include <iostream>
#include <string>

class Player {//класс
private:
    std::string name;
    int lvl;
    int exp;

public:
    // Конструктор: принимает имя и начальный уровень.
    Player(const std::string& name, int lvl ) :
        name(name), lvl(lvl), exp(0) {}
   

    // Деструктор: выводит сообщение об удалении игрока.
    ~Player() {
        std::cout << "Удален игрок: " << name << std::endl;
    }

    // повышение уровня при достижении определенного количества очков.
    void lvlUp() {}
void addExp(int amount) {
        if (exp >= 100) { // Пример условия для повышения уровня
         lvl++;   
         exp = 0; // Сброс очков после повышения уровня
            
        }
    }

};

int main() {
    // создание игрока
    Player player("роман" ,3);

    // Добавление очков опыта
    player.addExp(50);
    player.addExp(60);

    
    return 0;
}
 
.....................ФИЛЬМ............

#include <iostream>
#include <string>

class Film {//класс
private:
    std::string title;
    std::string director;
    int year;
    double rating;

public:
    // Конструктор: принимает все поля.
    Film(std::string title, std::string director, int year, float rating)
        : title(title), director(director), year(year), rating(rating) {}
    
//  Метод: вывод информации о фильме
    void play()  {
        std::cout << "Название: " << title << std::endl;
        std::cout << "Режиссер: " << director << std::endl;
        std::cout << "Год выхода: " << year << std::endl;
        std::cout << "Рейтинг: " << rating << std::endl;
    }

    // Деструктор: выводит сообщение о завершении показа фильма.
    ~~Film() {
        std::cout << "Показ фильма завершен\n"<< std::endl;
    }

    
};

int main() {
    // Создание объекта Фильм
    Film film("формаж 3", "джастин лин", 2006, 8.7);

    // Вывод информации о фильме
    film.play();

    return 0;
}
 
 .....................РАБОТНИК................

 #include <iostream>
#include <string>

class Worker {//класс
private:
  std::string name;
  std::string position;
  double salary;
  int seniority;

public:
    // Конструктор: принимает имя, должность и зарплату.
    Worker(std::string name, std::string position, double salary, int seniority)
      : name(name), position(position), salary(salary), seniority(seniority) {}


    // Метод: повышение зарплаты в зависимости от стажа.
    void increaseSalary() {
        if (seniority >= 5) { // пример условия для повышения зарплаты
            salary += 1.1; // повышение на 10%
            
        }
    }
// Деструктор: выводит сообщение об увольнении работника.
    ~Worker() {
        std::cout << "Уволен работник: " << name << std::endl;
    }
    
};
int main() {
    // создание объекта Работник
    Worker worker("роман", "Программист", 50000);

    worker.increaseSalary();
    

    return 0;
}

.................................ТОВАР...............

 ##include <iostream>
#include <string>

class Product {
private:
    std::string name;
    double price;
    int quantityInStock;

public:
    // Конструктор: принимает название и цену.
    Product(const std::string& name, double price) : name(name), price(price), quantityInStock() {
        //Инициализируем количество на складе нулем
    }

    // Метод для расчета стоимости товара на складе
    double costInStock()  {
        return price * quantityInStock;
    }

    //Метод для изменения количества на складе 
    void changeQuantity(int newQuantity){
        quantityInStock = newQuantity;
    }


   // Деструктор: выводит сообщение о том, что товар больше не хранится на складе.
    ~Product() {
        std::cout << "Товар  больше не хранится на складе." << std::endl;
    }


};

int main() {
    Product product("молоко", 60);
    product.changeQuantity(10);
    std::cout << "Стоимость молока на складе: " << product.costInStock() << std::endl;
    


    return 0;
}